import 'dart:typed_data';
import 'package:revision/core/services/vertex_ai_service.dart';

void main() async {
  print('üß™ Testing AI Processing Pipeline...');
  
  final aiService = VertexAIService();
  
  // Create a small test image (1x1 pixel)
  final testImageBytes = Uint8List.fromList([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
    0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
    0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
    0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xDA, 0x00, 0x0C,
    0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x00, 0xFF, 0xD9
  ]);
  
  // Test markers (simulating marked objects)
  final testMarkers = [
    {'type': 'object_to_remove', 'x': 0.5, 'y': 0.5}
  ];
  
  try {
    print('üìù Step 1: Testing prompt generation...');
    final prompt = await aiService.generateEditingPrompt(
      imageBytes: testImageBytes,
      markers: testMarkers,
    );
    print('‚úÖ Generated prompt: ${prompt.substring(0, 50)}...');
    
    print('ü§ñ Step 2: Testing AI image processing...');
    final processedImage = await aiService.processImageWithAI(
      imageBytes: testImageBytes,
      editingPrompt: prompt,
    );
    print('‚úÖ Processing completed! Result size: ${processedImage.length} bytes');
    
    if (processedImage.length == testImageBytes.length) {
      print('‚ö†Ô∏è  Result is same size as input - likely simulation mode');
    } else {
      print('üéâ Result is different size - real AI processing detected!');
    }
    
  } catch (e) {
    print('‚ùå Test failed: $e');
  }
  
  print('üß™ Test completed!');
}
