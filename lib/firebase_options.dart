// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb;

// Import environment-specific configurations
import 'firebase_options_dev.dart' as dev;
import 'firebase_options_staging.dart' as staging;
import 'firebase_options_production.dart' as production;
import 'core/config/environment_detector.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
/// Supports both compile-time and runtime environment detection.
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // Use runtime environment detection
    final environment = EnvironmentDetector.currentEnvironment;
    
    // Return environment-specific options
    switch (environment) {
      case AppEnvironment.production:
        return production.DefaultFirebaseOptions.currentPlatform;
      case AppEnvironment.staging:
        return staging.DefaultFirebaseOptions.currentPlatform;
      case AppEnvironment.development:
        return dev.DefaultFirebaseOptions.currentPlatform;
    }
  }

  /// Get Firebase options for a specific environment
  static FirebaseOptions getOptionsForEnvironment(AppEnvironment environment) {
    switch (environment) {
      case AppEnvironment.production:
        return production.DefaultFirebaseOptions.currentPlatform;
      case AppEnvironment.staging:
        return staging.DefaultFirebaseOptions.currentPlatform;
      case AppEnvironment.development:
        return dev.DefaultFirebaseOptions.currentPlatform;
    }
  }

  /// Get debug information about current Firebase configuration
  static Map<String, dynamic> getDebugInfo() {
    final currentOptions = currentPlatform;
    return {
      'environment': EnvironmentDetector.environmentString,
      'projectId': currentOptions.projectId,
      'appId': currentOptions.appId,
      'platform': defaultTargetPlatform.name,
      'isWeb': kIsWeb,
      'environmentDetection': EnvironmentDetector.getDebugInfo(),
    };
  }
}