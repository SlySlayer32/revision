import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:revision/core/services/gemini_ai_service.dart';
import 'package:revision/test_firebase_ai.dart';

/// Debug page to test Firebase AI setup
/// Add this to your app's navigation to test Firebase AI
class FirebaseAITestPage extends StatefulWidget {
  const FirebaseAITestPage({super.key});

  @override
  State<FirebaseAITestPage> createState() => _FirebaseAITestPageState();
}

class _FirebaseAITestPageState extends State<FirebaseAITestPage> {
  String _testResult = 'Ready to test Firebase AI';
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Firebase AI Test'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Firebase AI Test Suite',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),

            // Test buttons
            ElevatedButton(
              onPressed: _isLoading ? null : _testBasicSetup,
              child: const Text('Test Basic Firebase AI Setup'),
            ),
            const SizedBox(height: 10),

            ElevatedButton(
              onPressed: _isLoading ? null : _testGeminiAIService,
              child: const Text('Test GeminiAIService'),
            ),
            const SizedBox(height: 10),

            ElevatedButton(
              onPressed: _isLoading ? null : _testSimplePrompt,
              child: const Text('Test Simple Text Prompt'),
            ),
            const SizedBox(height: 20),

            // Loading indicator
            if (_isLoading)
              const Center(
                child: CircularProgressIndicator(),
              ),

            // Results area
            Expanded(
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _testResult,
                    style: const TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _testBasicSetup() async {
    setState(() {
      _isLoading = true;
      _testResult = 'Testing basic Firebase AI setup...\n';
    });

    try {
      await FirebaseAITester.testFirebaseAI();
      _appendResult('✅ Basic setup test completed successfully!');
    } catch (e) {
      _appendResult('❌ Basic setup test failed: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _testGeminiAIService() async {
    setState(() {
      _isLoading = true;
      _testResult = 'Testing GeminiAIService...\n';
    });

    try {
      final service = GetIt.instance<GeminiAIService>();
      _appendResult('✅ GeminiAIService retrieved from GetIt');

      // Test if models are initialized
      try {
        final analysisModel = service.analysisModel;
        _appendResult(
            '✅ Analysis model is available: ${analysisModel.toString()}');
      } catch (e) {
        _appendResult('❌ Analysis model error: $e');
      }

      try {
        final imageModel = service.imageGenerationModel;
        _appendResult('✅ Image model is available: ${imageModel.toString()}');
      } catch (e) {
        _appendResult('❌ Image model error: $e');
      }
    } catch (e) {
      _appendResult('❌ GeminiAIService test failed: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _testSimplePrompt() async {
    setState(() {
      _isLoading = true;
      _testResult = 'Testing simple text prompt...\n';
    });

    try {
      final service = GetIt.instance<GeminiAIService>();
      _appendResult('Starting text prompt test...');

      final response = await service.processTextPrompt(
          'Hello! Please respond with "Firebase AI is working!" to confirm you are operational.');

      _appendResult('✅ SUCCESS! Response received:');
      _appendResult('📝 $response');
    } catch (e) {
      _appendResult('❌ Text prompt test failed: $e');

      // Provide guidance based on error
      if (e.toString().contains('API key') ||
          e.toString().contains('INVALID_ARGUMENT')) {
        _appendResult('\n💡 SOLUTION: API Key Issue');
        _appendResult('1. Go to Firebase Console');
        _appendResult('2. Select project: revision-464202');
        _appendResult('3. Go to Build > Firebase AI Logic');
        _appendResult('4. Enable Gemini Developer API');
        _appendResult('5. Verify API key configuration');
      } else if (e.toString().contains('quota') ||
          e.toString().contains('RESOURCE_EXHAUSTED')) {
        _appendResult('\n💡 SOLUTION: API Quota Issue');
        _appendResult('1. Check Gemini API quota');
        _appendResult('2. May have hit free tier limit');
        _appendResult('3. Wait or upgrade to paid tier');
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _appendResult(String message) {
    setState(() {
      _testResult += '$message\n';
    });
  }
}
