import 'dart:developer';
import 'package:firebase_ai/firebase_ai.dart';

/// Debug script to test Gemini AI connectivity
class GeminiDebugTester {
  static Future<void> testGeminiConnection() async {
    try {
      log('üîß Starting Gemini Debug Test...');

      // Test 1: Initialize Firebase AI
      log('Step 1: Creating Firebase AI instance...');
      final firebaseAI = FirebaseAI.googleAI();
      log('‚úÖ Firebase AI instance created');

      // Test 2: Create a simple model
      log('Step 2: Creating Gemini model...');
      final model = firebaseAI.generativeModel(model: 'gemini-1.5-flash');
      log('‚úÖ Gemini model created');

      // Test 3: Simple text generation
      log('Step 3: Testing simple text generation...');
      final response = await model.generateContent([
        Content.text(
            'Hello, can you respond with just "Yes" if you are working?')
      ]).timeout(const Duration(seconds: 30));

      if (response.text != null && response.text!.isNotEmpty) {
        log('‚úÖ SUCCESS: Gemini responded with: ${response.text}');
      } else {
        log('‚ö†Ô∏è WARNING: Gemini responded but with empty text');
      }
    } catch (e, stackTrace) {
      log('üö® GEMINI TEST FAILED: $e');
      log('Error Type: ${e.runtimeType}');
      log('Stack Trace: $stackTrace');

      // Analyze the error
      final errorString = e.toString().toLowerCase();
      if (errorString.contains('403') || errorString.contains('forbidden')) {
        log('üí° DIAGNOSIS: Access denied - check Firebase project billing and API permissions');
      } else if (errorString.contains('404') ||
          errorString.contains('not found')) {
        log('üí° DIAGNOSIS: Model not found - check if gemini-1.5-flash is available in your region');
      } else if (errorString.contains('quota') ||
          errorString.contains('limit')) {
        log('üí° DIAGNOSIS: Quota exceeded - check Firebase billing and usage limits');
      } else if (errorString.contains('authentication') ||
          errorString.contains('unauthorized')) {
        log('üí° DIAGNOSIS: Authentication failed - check Firebase project configuration');
      } else {
        log('üí° DIAGNOSIS: Unknown error - check Firebase AI setup and network connectivity');
      }
    }
  }
}
